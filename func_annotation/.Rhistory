# Remover linhas sem anotações GO
input_data <- input_data[input_data$GO != "-", ]
# Recuperar go_term e ontology usando GO.db
go_terms <- AnnotationDbi::select(GO.db, keys = unique(input_data$GO), columns = c("GOID", "TERM", "ONTOLOGY"), keytype = "GOID")
# Merge dos dados de input com os dados recuperados
go_annotations <- input_data %>%
left_join(go_terms, by = c("GO" = "GOID"))
# Criar data frames necessários
gene_info <- go_annotations %>%
distinct(GID) %>%
mutate(SYMBOL = GID, GENENAME = GID) %>%
rename(GID = GID, SYMBOL = SYMBOL, GENENAME = GENENAME)
chromosome_info <- go_annotations %>%
distinct(GID) %>%
mutate(CHROMOSOME = NA) %>%
rename(GID = GID, CHROMOSOME = CHROMOSOME)
go_info <- go_annotations %>%
distinct(GO, TERM, ONTOLOGY) %>%
rename(GID = GO, GO = GO, EVIDENCE = TERM)
list(gene_info = gene_info, chromosome = chromosome_info, go = go_info)
}
# Função principal para criar o OrgDb
create_orgdb <- function(input_file, output_dir) {
orgdb_data <- prepare_orgdb_data(input_file)
makeOrgPackage(gene_info = orgdb_data$gene_info,
chromosome = orgdb_data$chromosome,
go = orgdb_data$go,
version = "0.1",
maintainer = "mariodeandradee@gmail.com",
author = "Edson Silva",
outputDir = output_dir,
tax_id = "69266",  # ID da taxonomia da sua espécie
genus = "Vaccinium",
species = "Vaccinium corymbosum L",
goTable = "go")
}
# Usar a função principal
input_file <- "output_go_terms.tsv"
output_dir <- "output_directory"  # Defina o diretório de saída conforme necessário
create_orgdb(input_file, output_dir)
# Instalar o pacote OrgDb gerado
install.packages(file.path(output_dir, "org.VcorymbosumL.eg.db"), repos = NULL)
# Carregar os pacotes necessários
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
# Função para ler o arquivo de entrada e formatar os dados
prepare_orgdb_data <- function(input_file) {
# Ler o arquivo de entrada
input_data <- read.table(input_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(input_data) <- c("GID", "GO")
# Remover linhas sem anotações GO
input_data <- input_data[input_data$GO != "-", ]
# Recuperar go_term e ontology usando GO.db
go_terms <- AnnotationDbi::select(GO.db, keys = unique(input_data$GO), columns = c("GOID", "TERM", "ONTOLOGY"), keytype = "GOID")
# Merge dos dados de input com os dados recuperados
go_annotations <- input_data %>%
left_join(go_terms, by = c("GO" = "GOID"))
# Criar data frames necessários
gene_info <- go_annotations %>%
distinct(GID) %>%
mutate(SYMBOL = GID, GENENAME = GID) %>%
rename(GID = GID, SYMBOL = SYMBOL, GENENAME = GENENAME)
chromosome_info <- go_annotations %>%
distinct(GID) %>%
mutate(CHROMOSOME = NA) %>%
rename(GID = GID, CHROMOSOME = CHROMOSOME)
go_info <- go_annotations %>%
distinct(GO, TERM, ONTOLOGY) %>%
rename(GID = GO, GO = GO, EVIDENCE = TERM)
list(gene_info = gene_info, chromosome = chromosome_info, go = go_info)
}
# Função principal para criar o OrgDb
create_orgdb <- function(input_file, output_dir) {
orgdb_data <- prepare_orgdb_data(input_file)
makeOrgPackage(gene_info = orgdb_data$gene_info,
chromosome = orgdb_data$chromosome,
go = orgdb_data$go,
version = "0.1",
maintainer = "mariodeandradee@gmail.com",
author = "Edson Silva",
outputDir = output_dir,
tax_id = "69266",  # ID da taxonomia da sua espécie
genus = "Vaccinium",
species = "Vaccinium corymbosum L",
goTable = "go")
}
# Usar a função principal
input_file <- "output_go_terms.tsv"
output_dir <- "output_directory"  # Defina o diretório de saída conforme necessário
create_orgdb(input_file, output_dir)
# Carregar os pacotes necessários
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
# Função para ler o arquivo de entrada e formatar os dados
prepare_orgdb_data <- function(input_file) {
# Ler o arquivo de entrada
input_data <- read.table(input_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(input_data) <- c("GID", "GO")
# Remover linhas sem anotações GO
input_data <- input_data[input_data$GO != "-", ]
# Recuperar go_term e ontology usando GO.db
go_terms <- AnnotationDbi::select(GO.db, keys = unique(input_data$GO), columns = c("GOID", "TERM", "ONTOLOGY"), keytype = "GOID")
# Merge dos dados de input com os dados recuperados
go_annotations <- input_data %>%
left_join(go_terms, by = c("GO" = "GOID"))
# Criar data frames necessários
gene_info <- go_annotations %>%
distinct(GID) %>%
mutate(SYMBOL = GID, GENENAME = GID) %>%
rename(GID = GID, SYMBOL = SYMBOL, GENENAME = GENENAME)
chromosome_info <- go_annotations %>%
distinct(GID) %>%
mutate(CHROMOSOME = NA) %>%
rename(GID = GID, CHROMOSOME = CHROMOSOME)
go_info <- go_annotations %>%
distinct(GID, GO, TERM, ONTOLOGY) %>%
rename(GO = GO, EVIDENCE = TERM)
list(gene_info = gene_info, chromosome = chromosome_info, go = go_info)
}
# Função principal para criar o OrgDb
create_orgdb <- function(input_file, output_dir) {
orgdb_data <- prepare_orgdb_data(input_file)
makeOrgPackage(gene_info = orgdb_data$gene_info,
chromosome = orgdb_data$chromosome,
go = orgdb_data$go,
version = "0.1",
maintainer = "mariodeandradee@gmail.com",
author = "Edson Silva",
outputDir = output_dir,
tax_id = "69266",  # ID da taxonomia da sua espécie
genus = "Vaccinium",
species = "Vaccinium corymbosum L",
goTable = "go")
}
# Usar a função principal
input_file <- "output_go_terms.tsv"
output_dir <- "output_directory"  # Defina o diretório de saída conforme necessário
create_orgdb(input_file, output_dir)
# Usar a função principal
input_file <- "output_go_terms.tsv"
output_dir <- "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/"  # Defina o diretório de saída conforme necessário
create_orgdb(input_file, output_dir)
# Carregar os pacotes necessários
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
# Função para ler o arquivo de entrada e formatar os dados
prepare_orgdb_data <- function(input_file) {
# Ler o arquivo de entrada
input_data <- read.table(input_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(input_data) <- c("GID", "GO")
# Remover linhas sem anotações GO
input_data <- input_data[input_data$GO != "-", ]
# Recuperar go_term e ontology usando GO.db
go_terms <- AnnotationDbi::select(GO.db, keys = unique(input_data$GO), columns = c("GOID", "TERM", "ONTOLOGY"), keytype = "GOID")
# Merge dos dados de input com os dados recuperados
go_annotations <- input_data %>%
left_join(go_terms, by = c("GO" = "GOID"))
# Criar data frames necessários
gene_info <- go_annotations %>%
distinct(GID) %>%
mutate(SYMBOL = GID, GENENAME = GID) %>%
rename(GID = GID, SYMBOL = SYMBOL, GENENAME = GENENAME)
# Preencher com NA para cromossomos, já que não temos essas informações
chromosome_info <- go_annotations %>%
distinct(GID) %>%
mutate(CHROMOSOME = NA) %>%
rename(GID = GID, CHROMOSOME = CHROMOSOME)
go_info <- go_annotations %>%
distinct(GID, GO, TERM, ONTOLOGY) %>%
rename(GO = GO, EVIDENCE = TERM)
list(gene_info = gene_info, chromosome = chromosome_info, go = go_info)
}
# Função principal para criar o OrgDb
create_orgdb <- function(input_file, output_dir) {
orgdb_data <- prepare_orgdb_data(input_file)
makeOrgPackage(gene_info = orgdb_data$gene_info,
chromosome = orgdb_data$chromosome,
go = orgdb_data$go,
version = "0.1",
maintainer = "mariodeandradee@gmail.com",
author = "Edson Silva",
outputDir = output_dir,
tax_id = "69266",  # ID da taxonomia da sua espécie
genus = "Vaccinium",
species = "Vaccinium corymbosum L",
goTable = "go")
}
# Usar a função principal
input_file <- "output_go_terms.tsv"
output_dir <- "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/"  # Defina o diretório de saída conforme necessário
create_orgdb(input_file, output_dir)
finchFile <- system.file("extdata","finch_info.txt",
package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
head(finch)
finchGOFile <- system.file("extdata","GO_finch.txt",
package="AnnotationForge")
fGO <- read.table(finchGOFile,sep="\t")
fGO
head(fGO)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Seu Nome",
maintainer = "Seu Nome <seu.email@example.com>",
outputDir = "caminho_para_o_diretorio_de_saida"
)
View(go_annotations)
View(gene_info)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Preparar dados
# Exemplo de estrutura esperada para `gene_info`
# # Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Seu Nome",
maintainer = "Seu Nome <seu.email@example.com>",
outputDir = "caminho_para_o_diretorio_de_saida"
)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Seu Nome",
maintainer = "Seu Nome <seu.email@example.com>",
outputDir = "caminho_para_o_diretorio_de_saida"
)
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "mariodeandradee@gmail.com",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/"
)
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "mariodeandradee@gmail.com",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
install.packages("org.Vcorymbosum.eg.db/", repos=NULL)
ego <- enrichGO(
gene = names("gene_list.txt"),
OrgDb = seu_orgdb, # Substitua com o nome do seu pacote
keyType = "GENEID", # Use o tipo de ID apropriado
ont = "ALL", # "BP", "MF", "CC"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
install.packages("org.Vcorymbosum.eg.db/inst/extdata/org.Vcorymbosum.eg.sqlite", repos = NULL, type = "source")
install.packages("org.VVaccinium corymbosum L.eg.sqlite", repos = NULL, type = "source")
install.packages("org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
library(org.Vcorymbosum.eg.db)
library(clusterProfiler)
ego <- enrichGO(
gene = names("gene_list.txt"),
OrgDb = seu_orgdb, # Substitua com o nome do seu pacote
keyType = "GENEID", # Use o tipo de ID apropriado
ont = "ALL", # "BP", "MF", "CC"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
ego <- enrichGO(
gene = names("gene_list.txt"),
OrgDb = org.Vcorymbosum.eg.db, # Substitua com o nome do seu pacote
keyType = "GENEID", # Use o tipo de ID apropriado
ont = "ALL", # "BP", "MF", "CC"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
gene_list <- readLines("gene_list.txt")
gene_list
ego <- enrichGO(
gene = names(gene_list),
OrgDb = org.Vcorymbosum.eg.db, # Substitua com o nome do seu pacote
keyType = "GENEID", # Use o tipo de ID apropriado
ont = "ALL", # "BP", "MF", "CC"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
keytypes(org.Vcorymbosum.eg.db)
ego <- enrichGO(
gene = names(gene_list),
OrgDb = org.Vcorymbosum.eg.db, # Substitua com o nome do seu pacote
keyType = "GENENAME", # Use o tipo de ID apropriado
ont = "ALL", # "BP", "MF", "CC"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Executar a análise de enriquecimento de GO
ego <- enrichGO(
gene = gene_list, # Use a lista de genes lida
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "ALL", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
gene_list <- readLines("gene_list.txt")
# Verificar as primeiras linhas da lista de genes
head(gene_list)
gene_list <- readLines("gene_list.txt")
# Verificar as primeiras linhas da lista de genes
head(gene_list)
# Executar a análise de enriquecimento de GO
ego <- enrichGO(
gene = gene_list, # Use a lista de genes lida
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "ALL", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
library(org.Vcorymbosum.eg.db)
# Verifique os tipos de chave suportados
keytypes(org.Vcorymbosum.eg.db)
# Verifique os primeiros 6 genes do banco de dados
head(keys(org.Vcorymbosum.eg.db, keytype = "GID"))
# Verifique os primeiros 6 genes da lista fornecida
head(gene_list)
# Usar apenas os primeiros 10 genes para teste
gene_list_subset <- gene_list[1:10]
# Executar a análise de enriquecimento de GO
ego <- enrichGO(
gene = gene_list, # Use a lista de genes lida
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "ALL", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Ajustar os IDs de genes na lista para corresponder ao formato do banco de dados
adjusted_gene_list <- sub("(-gene-\\d+\\.\\d+)$", "\\1-mRNA-1", gene_list)
# Verificar os primeiros IDs ajustados
head(adjusted_gene_list)
# Ajustar os IDs de genes na lista para corresponder ao formato do banco de dados
adjusted_gene_list <- sub("(-gene-\\d+\\.\\d+)$", "\\1-mRNA-1", gene_list)
# Verificar os primeiros IDs ajustados
head(adjusted_gene_list)
# Executar a análise de enriquecimento de GO com a lista ajustada
ego <- enrichGO(
gene = adjusted_gene_list, # Use a lista de genes ajustada
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "ALL", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Verificar os primeiros IDs ajustados
head(adjusted_gene_list)
# Ajustar os IDs de genes na lista para corresponder ao formato do banco de dados
adjusted_gene_list <- sub("(-gene-\\d+\\.\\d+)$", "\\-mRNA-1", gene_list)
# Verificar os primeiros IDs ajustados
head(adjusted_gene_list)
gene_list <- readLines("gene_list.txt")
head(gene_list
head(gene_list)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
View(gene_info)
View(go_annotations)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "mariodeandradee@gmail.com",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = Edson <mariodeandradee@gmail.com>,
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
install.packages("org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
library(org.Vcorymbosum.eg.db)
keytypes(org.Vcorymbosum.eg.db)
library(clusterProfiler)
gene_list <- readLines("gene_list.txt")
# Verifique os tipos de chave suportados
keytypes(org.Vcorymbosum.eg.db)
# Executar a análise de enriquecimento de GO com a lista ajustada
ego <- enrichGO(
gene = gene_list, # Use a lista de genes ajustada
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "ALL", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Executar a análise de enriquecimento de GO com a lista ajustada
ego <- enrichGO(
gene = gene_list, # Use a lista de genes ajustada
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID", # Use "GID" como tipo de chave
ont = "BP", # Pode usar "BP", "MF", "CC" ou "ALL" para todas
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Selecionar um gene específico para verificar as anotações GO associadas
sample_gene <- gene_list[1]
select(org.Vcorymbosum.eg.db, keys = sample_gene, columns = c("GOID", "ONTOLOGY"), keytype = "GID")
# Verifique os primeiros 6 genes do banco de dados
head(keys(org.Vcorymbosum.eg.db, keytype = "GID"))
library(org.Vcorymbosum.eg.db)
install.packages("org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
library(org.Vcorymbosum.eg.db)
keytypes(org.Vcorymbosum.eg.db)
library(clusterProfiler)
# Verifique os primeiros 6 genes do banco de dados
head(keys(org.Vcorymbosum.eg.db, keytype = "GID"))
head(gene_info)
head(go_annotations)
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("output_go_terms.tsv", header=TRUE, sep="\t")
head(gene_info)
head(go_annotations)
# Criar o pacote OrgDb
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
install.packages("org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
library(org.Vcorymbosum.eg.db)
keytypes(org.Vcorymbosum.eg.db)
library(clusterProfiler)
# Verifique os primeiros 6 genes do banco de dados
head(keys(org.Vcorymbosum.eg.db, keytype = "GID"))
head(gene_info$GID)
library(AnnotationForge)
# Crie o pacote OrgDb novamente
makeOrgPackage(
gene_info = gene_info,
go = go_annotations,
version = "0.1.0",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
outputDir = "/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/",
tax_id = "69266"
)
install.packages("/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("/Users/deandradesilvae/Documents/edson/lab_meet/workshop/vcorimb/func_annotation/org.Vcorymbosum.eg.db_0.1.0.tar.gz", repos = NULL, type = "source")
library(org.Vcorymbosum.eg.db)
head(keys(org.Vcorymbosum.eg.db, keytype = "GID"))
