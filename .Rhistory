gene_list <- readLines("gene_list.txt")
head(gene_list)
keytypes(org.Vcorymbosum.eg.db)
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
print(all(valid_ids))  # Deve retornar TRUE se todos os IDs forem válidos
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
valid_ids
# Verifique se os IDs na gene_list estão no banco de dados
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
# Exiba os IDs que são inválidos
invalid_ids <- gene_list[!valid_ids]
# Imprima os IDs inválidos
print(invalid_ids)
# Exiba os IDs que são inválidos
invalid_ids <- gene_list[valid_ids]
# Imprima os IDs inválidos
print(invalid_ids)
# Imprima os IDs inválidos
print(invalid_ids)
ego <- enrichGO(
gene = invalid_ids,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
str(invalid_ids)
valid_ids
# Exiba os IDs que são inválidos
invalid_ids <- gene_list[!valid_ids]
# Imprima os IDs inválidos
print(invalid_ids)
str(invalid_ids)
ego <- enrichGO(
gene = invalid_ids,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Leia a lista de IDs dos genes
gene_list <- readLines("gene_list.txt")
# Verifique se os IDs na gene_list estão no banco de dados
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
# Filtre os IDs válidos
valid_gene_list <- gene_list[valid_ids]
# Execute a análise de enriquecimento GO com os IDs válidos
ego <- enrichGO(
gene = valid_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # ou "CC" ou "MF"
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Leia a lista de IDs dos genes
gene_list <- readLines("gene_list.txt")
# Verifique os tipos de chave disponíveis
available_keytypes <- keytypes(org.Vcorymbosum.eg.db)
print(available_keytypes)
# Verifique se os IDs na gene_list estão no banco de dados
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
# Filtre os IDs válidos
valid_gene_list <- gene_list[valid_ids]
# Execute a análise de enriquecimento GO com os IDs válidos
ego <- enrichGO(
gene = valid_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Verifique os resultados
head(ego)
# Leia a lista de IDs dos genes
gene_list <- readLines("gene_list.txt")
# Verifique os tipos de chave disponíveis
available_keytypes <- keytypes(org.Vcorymbosum.eg.db)
print(available_keytypes)
# Verifique se os IDs na gene_list estão no banco de dados
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
# Filtre os IDs válidos
valid_gene_list <- gene_list[valid_ids]
# Execute a análise de enriquecimento GO com os IDs válidos
ego <- enrichGO(
gene = valid_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Verifique se todos os IDs válidos estão presentes no banco de dados
all(valid_gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID"))
# Verifique os resultados
head(ego)
# Visualizar as primeiras entradas da tabela 'genes'
head(select(org.Vcorymbosum.eg.db, keys = head(keys(org.Vcorymbosum.eg.db, keytype = "GID")), columns = c("GENENAME", "GOID"), keytype = "GID"))
# Leia a lista de IDs dos genes
gene_list <- readLines("gene_list.txt")
# Verifique os tipos de chave disponíveis
available_keytypes <- keytypes(org.Vcorymbosum.eg.db)
print(available_keytypes)
# Verifique se os IDs na gene_list estão no banco de dados
valid_ids <- gene_list %in% keys(org.Vcorymbosum.eg.db, keytype = "GID")
# Filtre os IDs válidos
valid_gene_list <- gene_list[valid_ids]
valid_gene_list
# Execute a análise de enriquecimento GO com os IDs válidos
ego <- enrichGO(
gene = valid_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Verifique os tipos de chave disponíveis
keytypes(org.Vcorymbosum.eg.db)
# Obter mapeamento dos genes para GO terms
gene_to_go <- select(org.Vcorymbosum.eg.db, keys = valid_gene_list, columns = "GOID", keytype = "GID")
columns(org.Vcorymbosum.eg.db)
# Obter o mapeamento dos genes para os termos GO
gene_to_go <- mapIds(
x = org.Vcorymbosum.eg.db,
keys = valid_gene_list,
column = "GOID",
keytype = "GID",
multiVals = "list"
)
# Filtrar GO terms válidos
valid_go_ids <- unlist(gene_to_go[!sapply(gene_to_go, is.null)])
valid_go_ids
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = valid_go_ids,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GOID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
valid_go_ids
## Makes an organism package for Zebra Finch data.frames:
finchFile <- system.file("extdata","finch_info.txt",package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
## not that this is how it should always be, but that it *could* be this way.
fSym <- finch[,c(2,3,9)]
fSym <- fSym[fSym[,2]!="-",]
fSym <- fSym[fSym[,3]!="-",]
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
head(fSym)
head(gene_info)
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t")
head(gene_info)
head(fSym)
fChr <- finch[,c(2,7)]
fChr <- fChr[fChr[,2]!="-",]
colnames(fChr) <- c("GID","CHROMOSOME")
head(fChr)
fGO <- read.table(finchGOFile,sep="\t")
fGO <- fGO[fGO[,2]!="",]
fGO <- fGO[fGO[,3]!="",]
colnames(fGO) <- c("GID","GO","EVIDENCE")
head(fGO)
head(fGO)
finchGOFile <- system.file("extdata","GO_finch.txt",package="AnnotationForge")
fGO <- read.table(finchGOFile,sep="\t")
fGO <- fGO[fGO[,2]!="",]
fGO <- fGO[fGO[,3]!="",]
colnames(fGO) <- c("GID","GO","EVIDENCE")
head(fGO)
head(fSym)
head(fChr)
head(fGO)
## Makes an organism package for Zebra Finch data.frames:
finchFile <- system.file("extdata","finch_info.txt",package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
## not that this is how it should always be, but that it *could* be this way.
fSym <- finch[,c(2,3,9)]
fSym <- fSym[fSym[,2]!="-",]
fSym <- fSym[fSym[,3]!="-",]
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
head(fSym)
## Makes an organism package for Zebra Finch data.frames:
finchFile <- system.file("extdata","finch_info.txt",package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
## not that this is how it should always be, but that it *could* be this way.
fSym <- finch[,c(2,3,9)]
fSym <- fSym[fSym[,2]!="-",]
fSym <- fSym[fSym[,3]!="-",]
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fChr <- finch[,c(2,7)]
fChr <- fChr[fChr[,2]!="-",]
colnames(fChr) <- c("GID","CHROMOSOME")
finchGOFile <- system.file("extdata","GO_finch.txt",package="AnnotationForge")
fGO <- read.table(finchGOFile,sep="\t")
fGO <- fGO[fGO[,2]!="",]
fGO <- fGO[fGO[,3]!="",]
colnames(fGO) <- c("GID","GO","EVIDENCE")
head(fSym)
head(fChr)
head(fGO)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t")
head(fSym)
head(fChr)
head(fGO)
head(fSym)
## Makes an organism package for Zebra Finch data.frames:
finchFile <- system.file("extdata","finch_info.txt",package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
## not that this is how it should always be, but that it *could* be this way.
fSym <- finch[,c(2,3,9)]
fSym <- fSym[fSym[,2]!="-",]
fSym <- fSym[fSym[,3]!="-",]
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fChr <- finch[,c(2,7)]
fChr <- fChr[fChr[,2]!="-",]
colnames(fChr) <- c("GID","CHROMOSOME")
finchGOFile <- system.file("extdata","GO_finch.txt",package="AnnotationForge")
fGO <- read.table(finchGOFile,sep="\t")
fGO <- fGO[fGO[,2]!="",]
fGO <- fGO[fGO[,3]!="",]
colnames(fGO) <- c("GID","GO","EVIDENCE")
head(fSym)
head(fChr)
head(fGO)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t")
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.1",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
ooutputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
library(clusterProfiler)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.1",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
ooutputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
head(fSym)
head(fChr)
head(fGO)
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
library(clusterProfiler)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t")
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.1",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
ooutputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
View(fChr)
View(fGO)
View(fSym)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
View(fSym)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t", quote="")
View(fSym)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t", quote="")
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t", quote="")
colnames(fGO) <- c("GID","GO","EVIDENCE")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t", quote="")
colnames(fChr) <- c("GID","CHROMOSOME")
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.1",
author = "Edson",
maintainer = "Edson <mariodeandradee@gmail.com>",
ooutputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.0.1",
author = "Edson5",
maintainer = "Edson5 <mariodeandradee@gmail.com>",
ooutputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.0.1",
author = "Edson5",
maintainer = "Edson5 <mariodeandradee@gmail.com>",
outputDir = ".",
genus="Vaccinium",
species="corymbosum",
tax_id = "69266"
)
## then you can call install.packages based on the return value
install.packages("./org.Vcorymbosum.eg.db/", repos=NULL)
## then you can call install.packages based on the return value
install.packages("./org.Vcorymbosum.eg.db/", repos=NULL)
## then you can call install.packages based on the return value
install.packages("org.Vcorymbosum.eg.db_0.0.1.tar.gz", repos=NULL)
gene_list <- readLines("gene_list.txt")
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GOID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
library(org.Vcorymbosum.eg.db)
gene_list <- readLines("gene_list.txt")
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GOID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Fechar a conexão com o banco de dados
AnnotationDbi::dbDisconnect(org.Vcorymbosum.eg.db$conn)
con <- org.Vcorymbosum.eg_dbconn()
# ... realizar operações com a conexão ...
dbDisconnect(con)  # Fechando a conexão manualmente
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
library(clusterProfiler)
con <- org.Vcorymbosum.eg_dbconn()
# ... realizar operações com a conexão ...
dbDisconnect(con)  # Fechando a conexão manualmente
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
gene_list <- readLines("gene_list.txt")
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "SYMBOL",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
head(gene_list)
keys(org.Vaccinium.eg.db, keytype = "GENEID"
keys(org.Vaccinium.eg.db, keytype = "GENEID")
keys(org.Vaccinium.eg.db, keytype = "SYMBOL")
library(org.Vcorymbosum.eg.db)
keys(org.Vcorymbosum.eg.db, keytype = "SYMBOL")
gene_list %in% all_genes_in_orgdb
all_genes_in_orgdb <- keys(org.Vaccinium.eg.db, keytype = "SYMBOL")
genes_in_orgdb <- gene_list %in% all_genes_in_orgdb
all_genes_in_orgdb <- keys(org.Vaccinium.eg.db, keytype = "SYMBOL")
all_genes_in_orgdb <- keys(org.Vaccinium.eg.db, keytype = "SYMBOL")
library(org.Vcorymbosum.eg.db)
all_genes_in_orgdb <- keys(org.Vaccinium.eg.db, keytype = "SYMBOL")
all_genes_in_orgdb <- keys(org.Vcorymbosum.eg.db, keytype = "SYMBOL")
genes_in_orgdb <- gene_list %in% all_genes_in_orgdb
genes_in_orgdb
# Verificar quais genes da sua lista estão no OrgDb
genes_in_orgdb <- gene_list %in% all_genes_in_orgdb
# Filtrar a lista de genes para manter apenas aqueles que estão no OrgDb
filtered_gene_list <- gene_list[genes_in_orgdb]
filtered_gene_list %in% all_genes_in_orgdb
filtered_gene_list
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = filtered_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "SYMBOL",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = filtered_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
keys(org.Vcorymbosum.eg.db, keytype = "GID")
keys(org.Vcorymbosum.eg.db, keytype = "SYMBOL")
# Suponha que você tenha os seguintes arquivos
gene_info <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t")
go_annotations <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t")
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t", quote="")
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t", quote="")
colnames(fGO) <- c("GID","GO","EVIDENCE")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t", quote="")
colnames(fChr) <- c("GID","CHROMOSOME")
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.0.1",
author = "Edson5",
maintainer = "Edson5 <mariodeandradee@gmail.com>",
outputDir = ".",
genus="Vaccinium",
species="corymbosum"
)
library(GO.db)
library(AnnotationDbi)
library(AnnotationForge)
library(dplyr)
library(clusterProfiler)
fSym <- read.table("func_annotation/gene_info.txt", header=TRUE, sep="\t", quote="")
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fGO <- read.table("func_annotation/go_annotation.tsv", header=TRUE, sep="\t", quote="")
colnames(fGO) <- c("GID","GO","EVIDENCE")
fChr <- read.table("func_annotation/chr_data.txt", header=TRUE, sep="\t", quote="")
colnames(fChr) <- c("GID","CHROMOSOME")
head(fSym)
head(fChr)
head(fGO)
makeOrgPackage(
gene_info=fSym, chromosome=fChr, go=fGO,
version = "0.0.1",
author = "Edson5",
maintainer = "Edson5 <mariodeandradee@gmail.com>",
outputDir = ".",
genus="Vaccinium",
species="corymbosum"
)
library(org.Vcorymbosum.eg.db)
gene_list <- readLines("gene_list.txt")
head(gene_list)
# Realizar a análise de enriquecimento GO com IDs GO válidos
ego <- enrichGO(
gene = filtered_gene_list,
OrgDb = org.Vcorymbosum.eg.db,
keyType = "GID",
ont = "BP",  # "BP" para Biological Process, "CC" para Cellular Component, "MF" para Molecular Function
pAdjustMethod = "BH",
qvalueCutoff = 0.05
)
